// Copyright (c) 2019 Marshall A. Greenblatt. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//    * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//    * Neither the name of Google Inc. nor the name Chromium Embedded
// Framework nor the names of its contributors may be used to endorse
// or promote products derived from this software without specific prior
// written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the CEF translator tool and should not edited
// by hand. See the translator.README.txt file in the tools directory for
// more information.
//
// $hash=798bc67e42435f9387ef77895ca5ea47e94c427e$
//

#ifndef CEF_INCLUDE_CAPI_CEF_AUDIO_HANDLER_CAPI_H_
#define CEF_INCLUDE_CAPI_CEF_AUDIO_HANDLER_CAPI_H_
#pragma once

#include "include/capi/cef_base_capi.h"
#include "include/capi/cef_browser_capi.h"

#ifdef __cplusplus
extern "C" {
#endif

///
// Implement this structure to handle audio events All functions will be called
// on the UI thread
///
typedef struct _cef_audio_handler_t {
  ///
  // Base structure.
  ///
  cef_base_ref_counted_t base;

  ///
  // Event handler for every new audio stream, |audio_stream_id| will identify
  // this stream in future events, and is unique across all other audio stream.
  // OnAudioStreamStarted can be called also after OnAudioSteamStopped was
  // called. |channels| amount of channels used on stream and |channel_layout|
  // the used layout of the channels, |sample_rate| define the used sample rate
  // of stream. With |frames_per_buffer| becomes the normally used amount of
  // frames on called stream defined. On |process| can be the used structure
  // added who handle to stream.
  ///
  void(CEF_CALLBACK* on_audio_stream_started)(
      struct _cef_audio_handler_t* self,
      struct _cef_browser_t* browser,
      int audio_stream_id,
      int channels,
      cef_channel_layout_t channel_layout,
      int sample_rate,
      int frames_per_buffer);

  ///
  // Event handler for new audio packet from |audio_stream_id|, |data| is an
  // array representing raw PCM data as floating point type, i.e. 4-byte
  // value(s). The layout of this array depends on the channel layout provided
  // by the OnAudioStreamStarted handler. |frames| is the number of frames in
  // the PCM packet. Based on number of frames and the channel layout one can
  // calculate the size in bytes. |pts| is the presentation timestamp and
  // represents the time at which the decompressed packet will be presented to
  // the user.
  ///
  void(CEF_CALLBACK* on_audio_stream_packet)(struct _cef_audio_handler_t* self,
                                             struct _cef_browser_t* browser,
                                             int audio_stream_id,
                                             const void** data,
                                             int frames,
                                             int64_t pts);

  ///
  // Event handler for stream |audio_stream_id| has been stopped, for every
  // OnAudioStreamStarted, OnAudioSteamStopped will be called.
  ///
  void(CEF_CALLBACK* on_audio_stream_stopped)(struct _cef_audio_handler_t* self,
                                              struct _cef_browser_t* browser,
                                              int audio_stream_id);
} cef_audio_handler_t;

#ifdef __cplusplus
}
#endif

#endif  // CEF_INCLUDE_CAPI_CEF_AUDIO_HANDLER_CAPI_H_
